package com.harbourspace.cloudcomputing.coffeeshop.configs

import lombok.RequiredArgsConstructor
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider
import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedAsyncClient
import software.amazon.awssdk.enhanced.dynamodb.extensions.AutoGeneratedTimestampRecordExtension
import software.amazon.awssdk.enhanced.dynamodb.extensions.VersionedRecordExtension
import software.amazon.awssdk.http.nio.netty.NettyNioAsyncHttpClient
import software.amazon.awssdk.http.nio.netty.SdkEventLoopGroup
import software.amazon.awssdk.services.dynamodb.DynamoDbAsyncClient
import software.amazon.awssdk.utils.ThreadFactoryBuilder
import java.time.Clock

@Configuration
@RequiredArgsConstructor
class DynamoDbConfig {
    @Bean
    fun clock(): Clock {
        return Clock.systemUTC()
    }

    @Bean
    fun dbAsyncClient(
        dynamoDbClient: DynamoDbAsyncClient?, clock: Clock?
    ): DynamoDbEnhancedAsyncClient {
        val autoGeneratedTimestampExtension = AutoGeneratedTimestampRecordExtension.builder().baseClock(clock).build()
        return DynamoDbEnhancedAsyncClient.builder()
            .extensions(autoGeneratedTimestampExtension, VersionedRecordExtension.builder().build())
            .dynamoDbClient(dynamoDbClient)
            .build()
    }

    @Bean
    fun dynamoDbAsyncClient(): DynamoDbAsyncClient {
        return DynamoDbAsyncClient.builder()
            .httpClientBuilder(NettyNioAsyncHttpClient.builder())
            .credentialsProvider(EnvironmentVariableCredentialsProvider.create())
            .build()
    }

    companion object {
        private val eventLoopGroup: SdkEventLoopGroup
            private get() = SdkEventLoopGroup.builder()
                .numberOfThreads(16)
                .threadFactory(ThreadFactoryBuilder().threadNamePrefix("default-event-loop").build())
                .build()
    }
}
